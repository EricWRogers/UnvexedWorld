//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerGamepad.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerGamepad: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerGamepad()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerGamepad"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""cb41fcf4-d20a-4b3a-9b59-2e5a2d10076f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7fb845bd-1f8f-42ac-85d2-faa8037c49d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8bdf2e68-0dc9-4b0e-9142-bf057d3cb30f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""14957a0a-c398-4c2b-8855-378d899b7bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookingRightStick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7979a5e7-7c6a-4fbd-a908-5f1e20124396"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeLight"",
                    ""type"": ""Button"",
                    ""id"": ""05d97a3c-d0df-4188-9104-cb397909786f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""470bdd1a-d8ce-4211-ac17-2916dd98f918"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Splendor"",
                    ""type"": ""Button"",
                    ""id"": ""41d9605c-ea9d-4280-98fe-27fa7e0a7b9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scavange"",
                    ""type"": ""Button"",
                    ""id"": ""7ef3549e-78b7-4616-a0e9-60a458845442"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clear"",
                    ""type"": ""Button"",
                    ""id"": ""59f2e419-0f6f-471b-9345-403172e29ce8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Casting"",
                    ""type"": ""Button"",
                    ""id"": ""11adc182-2268-4110-bc48-4adb5419ce83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a66807a2-feb0-460c-9985-5f818571efd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""1c858211-e9ba-428c-8da1-821a18b36357"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeHeavy"",
                    ""type"": ""Button"",
                    ""id"": ""c3501592-e1b0-4ff6-a859-eb974e7749aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f469351b-5403-4454-b184-b7904410fa22"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d3902d9-edb9-4eb3-90fb-273eabee71cf"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a6735e7-4311-430e-9e17-af148fa3a07f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59e25198-ebfc-44c1-ab8d-0ccc29c6b85e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookingRightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad0894d-7cf2-4069-8c2e-fa641821d3b1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60c52be3-2605-4238-9e0f-9b73b32550a2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""383b3b16-a300-4736-9836-74f06b01d3ca"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Splendor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e75925d-4526-4527-9d77-4f5eb213088d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scavange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2845efc-47da-42b0-b782-d6dcc1de3bf0"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b857cdb1-09b7-418d-a9cd-34ec9eea299c"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Casting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cb06a85-21f7-411d-ac06-16d440ed430f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8127b9cd-13e8-4895-be51-8bcc9564b25b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc875737-9aa5-4bd2-be20-d71e7b6a10af"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeHeavy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Movement = m_GamePlay.FindAction("Movement", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_Dash = m_GamePlay.FindAction("Dash", throwIfNotFound: true);
        m_GamePlay_LookingRightStick = m_GamePlay.FindAction("LookingRightStick", throwIfNotFound: true);
        m_GamePlay_MeleeLight = m_GamePlay.FindAction("MeleeLight", throwIfNotFound: true);
        m_GamePlay_Shoot = m_GamePlay.FindAction("Shoot", throwIfNotFound: true);
        m_GamePlay_Splendor = m_GamePlay.FindAction("Splendor", throwIfNotFound: true);
        m_GamePlay_Scavange = m_GamePlay.FindAction("Scavange", throwIfNotFound: true);
        m_GamePlay_Clear = m_GamePlay.FindAction("Clear", throwIfNotFound: true);
        m_GamePlay_Casting = m_GamePlay.FindAction("Casting", throwIfNotFound: true);
        m_GamePlay_Pause = m_GamePlay.FindAction("Pause", throwIfNotFound: true);
        m_GamePlay_LockOn = m_GamePlay.FindAction("LockOn", throwIfNotFound: true);
        m_GamePlay_MeleeHeavy = m_GamePlay.FindAction("MeleeHeavy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Movement;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_Dash;
    private readonly InputAction m_GamePlay_LookingRightStick;
    private readonly InputAction m_GamePlay_MeleeLight;
    private readonly InputAction m_GamePlay_Shoot;
    private readonly InputAction m_GamePlay_Splendor;
    private readonly InputAction m_GamePlay_Scavange;
    private readonly InputAction m_GamePlay_Clear;
    private readonly InputAction m_GamePlay_Casting;
    private readonly InputAction m_GamePlay_Pause;
    private readonly InputAction m_GamePlay_LockOn;
    private readonly InputAction m_GamePlay_MeleeHeavy;
    public struct GamePlayActions
    {
        private @PlayerGamepad m_Wrapper;
        public GamePlayActions(@PlayerGamepad wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GamePlay_Movement;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @Dash => m_Wrapper.m_GamePlay_Dash;
        public InputAction @LookingRightStick => m_Wrapper.m_GamePlay_LookingRightStick;
        public InputAction @MeleeLight => m_Wrapper.m_GamePlay_MeleeLight;
        public InputAction @Shoot => m_Wrapper.m_GamePlay_Shoot;
        public InputAction @Splendor => m_Wrapper.m_GamePlay_Splendor;
        public InputAction @Scavange => m_Wrapper.m_GamePlay_Scavange;
        public InputAction @Clear => m_Wrapper.m_GamePlay_Clear;
        public InputAction @Casting => m_Wrapper.m_GamePlay_Casting;
        public InputAction @Pause => m_Wrapper.m_GamePlay_Pause;
        public InputAction @LockOn => m_Wrapper.m_GamePlay_LockOn;
        public InputAction @MeleeHeavy => m_Wrapper.m_GamePlay_MeleeHeavy;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @LookingRightStick.started += instance.OnLookingRightStick;
            @LookingRightStick.performed += instance.OnLookingRightStick;
            @LookingRightStick.canceled += instance.OnLookingRightStick;
            @MeleeLight.started += instance.OnMeleeLight;
            @MeleeLight.performed += instance.OnMeleeLight;
            @MeleeLight.canceled += instance.OnMeleeLight;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Splendor.started += instance.OnSplendor;
            @Splendor.performed += instance.OnSplendor;
            @Splendor.canceled += instance.OnSplendor;
            @Scavange.started += instance.OnScavange;
            @Scavange.performed += instance.OnScavange;
            @Scavange.canceled += instance.OnScavange;
            @Clear.started += instance.OnClear;
            @Clear.performed += instance.OnClear;
            @Clear.canceled += instance.OnClear;
            @Casting.started += instance.OnCasting;
            @Casting.performed += instance.OnCasting;
            @Casting.canceled += instance.OnCasting;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @MeleeHeavy.started += instance.OnMeleeHeavy;
            @MeleeHeavy.performed += instance.OnMeleeHeavy;
            @MeleeHeavy.canceled += instance.OnMeleeHeavy;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @LookingRightStick.started -= instance.OnLookingRightStick;
            @LookingRightStick.performed -= instance.OnLookingRightStick;
            @LookingRightStick.canceled -= instance.OnLookingRightStick;
            @MeleeLight.started -= instance.OnMeleeLight;
            @MeleeLight.performed -= instance.OnMeleeLight;
            @MeleeLight.canceled -= instance.OnMeleeLight;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Splendor.started -= instance.OnSplendor;
            @Splendor.performed -= instance.OnSplendor;
            @Splendor.canceled -= instance.OnSplendor;
            @Scavange.started -= instance.OnScavange;
            @Scavange.performed -= instance.OnScavange;
            @Scavange.canceled -= instance.OnScavange;
            @Clear.started -= instance.OnClear;
            @Clear.performed -= instance.OnClear;
            @Clear.canceled -= instance.OnClear;
            @Casting.started -= instance.OnCasting;
            @Casting.performed -= instance.OnCasting;
            @Casting.canceled -= instance.OnCasting;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @MeleeHeavy.started -= instance.OnMeleeHeavy;
            @MeleeHeavy.performed -= instance.OnMeleeHeavy;
            @MeleeHeavy.canceled -= instance.OnMeleeHeavy;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnLookingRightStick(InputAction.CallbackContext context);
        void OnMeleeLight(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSplendor(InputAction.CallbackContext context);
        void OnScavange(InputAction.CallbackContext context);
        void OnClear(InputAction.CallbackContext context);
        void OnCasting(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnMeleeHeavy(InputAction.CallbackContext context);
    }
}
